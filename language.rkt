#lang racket

(provide #%app
         #%datum
         #%top
         #%top-interaction)
(provide (rename-out
           ; special syntax
           [dssl-module-begin   #%module-begin]
           ; built-in operators
           [modulo              %]
           [expt                **]
           [equal?              ==]
           [eq?                 ===]
           [not                 !]
           [bitwise-and         &]
           [bitwise-ior         \|]
           [bitwise-xor         ^]
           [bitwise-not         ~]
           [-                   -]
           [*                   *]
           [dssl-/              /]
           [dssl-+              +]
           [dssl-!=             !=]
           [dssl-!==            !==]
           [dssl-<              <]
           [dssl->              >]
           [dssl-<=             <=]
           [dssl->=             >=]
           [dssl->>             >>]
           [dssl-<<             <<]
           ; syntax
           [and                 and]
           [or                  or]
           [begin               begin]
           [cond                cond]
           [if                  if]
           [else                else]
           [void                pass]
           [vector              vector]
           [dssl-True           True]
           [dssl-False          False]
           [dssl-assert         assert]
           [dssl-assert-eq      assert_eq]
           [dssl-break          break]
           [dssl-continue       continue]
           [dssl-def            def]
           [dssl-defstruct      defstruct]
           [dssl-elif           elif]
           [dssl-error          error]
           [dssl-for            for]
           [dssl-for/vector     for/vector]
           [dssl-lambda         lambda]
           [dssl-let            let]
           [dssl-make-vector    make-vector]
           [dssl-object         object]
           [dssl-import         import]
           [dssl-return         return]
           [dssl-setf!          setf!]
           [dssl-setf!          =]
           [dssl-struct-ref     struct-ref]
           [dssl-test           test]
           [dssl-time           time]
           [dssl-vector-ref     vector-ref]
           [dssl-while          while])
         ; values
         ; * type predicates
         num?
         int?
         float?
         str?
         bool?
         proc?
         vec?
         ; * contracts
         any/c ; generated by parser
         OrC
         FunC
         apply_contract
         ; * numeric operations
         floor
         ceiling
         int
         float
         max
         min
         quotient
         random
         random_bits
         RAND_MAX
         remainder
         sqrt
         ; ** predicates
         zero?
         positive?
         negative?
         even?
         odd?
         ; * string operations
         chr
         explode
         format
         implode
         ord
         (rename-out
           [string-length       strlen])
         ; * vector operations
         build_vector
         len
         map
         filter
         ; * I/O operations
         print
         println
         ; * other functions
         identity)

(require dssl2/private/struct)
(require racket/stxparam
         racket/contract/region
         syntax/parse/define
         rackunit)
(require (prefix-in racket: racket))

(require (for-syntax syntax/parse))
(require (for-syntax dssl2/private/find-lib))

(define dssl-True #t)
(define dssl-False #f)

(define-syntax-rule (dssl-module-begin expr ...)
  (#%module-begin
   (#%provide (all-defined))
   (module* configure-runtime racket/base
     (require dssl2/private/parser
              dssl2/private/printer
              racket/pretty)
     (pretty-print-size-hook dssl-print-size-hook)
     (pretty-print-print-hook dssl-print-print-hook)
     (current-print dssl-print)
     (current-read-interaction
       (Î» (src in)
          (let loop ()
            (define-values (line column position) (port-next-location in))
            (define the-line (read-line in))
            (cond
              [(eof-object? the-line)
               the-line]
              [(regexp-match #rx"^ *$" the-line)
               (loop)]
              [else
                (define line-port (open-input-string the-line))
                (port-count-lines! line-port)
                (define relocated
                  (relocate-input-port line-port line column position
                                       #true #:name src))
                (parse-dssl2 src relocated #t)])))))
   expr ...))

; This is so that the documentation will consider elif a keyword.
(define-syntax-parameter
  dssl-elif
  (lambda (stx)
    (raise-syntax-error #f "use of elif keyword" stx)))

; We define return (for lambda) as a syntax parameter, and then
; syntax-parameterize it inside dssl-lambda.
(define-syntax-parameter
  dssl-return
  (lambda (stx)
    (raise-syntax-error #f "use of return keyword not in a function" stx)))

(define-simple-macro (make-set!able f)
  (unless (zero? (random 1))
    (set! f (void))))

(define-syntax-rule (dssl-lambda (param ...) expr ...)
  (lambda (param ...)
    (let/ec return-f
       (syntax-parameterize
         ([dssl-return (syntax-rules ()
                         [(_)         (return-f (void))]
                         [(_ ?result) (return-f ?result)])])
         (begin expr ...)))))

(define-simple-macro (dssl-def (f:id (formal:id contract:expr) ...)
                               result-contract:expr
                               expr:expr ...)
   #:fail-when (check-duplicate-identifier
                 (syntax->list #'(formal ...)))
               "duplicate argument name"
  (begin
    (define/contract f
                     (-> contract ... result-contract)
                     (dssl-lambda (formal ...) expr ...))
    (make-set!able f)))

(define-syntax dssl-let
  (syntax-rules ()
    [(_ (name contract))
     (begin
       (define/contract name contract (void))
       (make-set!able name))]
    [(_ (name contract) expr)
     (begin
       (define/contract name contract expr)
       (make-set!able name))]))

; while uses two syntax parameters, break and continue (shared by for)
(define-syntax-parameter
  dssl-break
  (lambda (stx)
    (raise-syntax-error #f "use of break keyword not in a loop" stx)))

(define-syntax-parameter
  dssl-continue
  (lambda (stx)
    (raise-syntax-error #f "use of continue keyword not in a loop" stx)))

(define-syntax-rule (dssl-while test expr ...)
  (let/ec break-f
    (let loop ()
      (define (continue-f) (loop) (break-f))
      (syntax-parameterize
        ([dssl-break (syntax-rules () [(_) (break-f)])]
         [dssl-continue (syntax-rules () [(_) (continue-f)])])
        (when test
          expr ...
          (loop))))))

(define-syntax (dssl-for stx)
  (syntax-parse stx
    [(_ [(i:id j:id) v:expr] expr:expr ...+)
     #:fail-when (and (bound-identifier=? #'i #'j) #'j)
                 "duplicate variable name"
     #'(let/ec break-f
         (for ([i (in-naturals)]
               [j (dssl-in-value v)])
           (let/ec continue-f
             (syntax-parameterize
               ([dssl-break    (syntax-rules () [(_) (break-f)])]
                [dssl-continue (syntax-rules () [(_) (continue-f)])])
               expr ...))))]
    [(_ [i:id v:expr] expr:expr ...+)
     #'(dssl-for [(_ i) v] expr ...)]))

(define-syntax (dssl-for/vector stx)
  (syntax-parse stx
    [(_ [(i:id j:id) v:expr] expr:expr)
     #:fail-when (and (bound-identifier=? #'i #'j) #'j)
                 "duplicate variable name"
     #'(for/vector ([i (in-naturals)]
                    [j (dssl-in-value v)])
         expr)]
    [(_ [j:id v:expr] expr:expr)
     #'(dssl-for/vector [(_ j) v] expr)]
    [(_ [(i:id j:id) v:expr] #:when when expr:expr)
     #:fail-when (and (bound-identifier=? #'i #'j) #'j)
                 "duplicate variable name"
     #'(for/vector ([i (in-naturals)]
                    [j (dssl-in-value v)]
                    #:when when)
         expr)]
    [(_ [j:id v:expr] #:when when:expr expr:expr)
     #'(dssl-for/vector [(_ j) v] #:when when expr)]))

(define (dssl-in-value v)
  (cond
    [(vector? v)   (in-vector v)]
    [(natural? v)  (in-range v)]
    [(string? v)   (in-vector (explode v))]
    [else          (type-error 'for v "something iterable")]))

(define-syntax (dssl-import stx)
  (syntax-parse stx
    [(_ lib:id)
     (let ([filename (path->string
                       (build-path
                         lib-directory
                         (format "~a.rkt" (syntax->datum #'lib))))])
       #`(#%require
          #,(datum->syntax stx `(file ,filename))))]))

; setf! is like Common Lisp setf, but it just recognizes three forms. We
; use this to translate assignments.
(define-syntax dssl-setf!
  (syntax-rules (dssl-vector-ref dssl-struct-ref)
    [(_ (dssl-vector-ref v i) rhs)
     (vector-set! v i rhs)]
    [(_ (dssl-struct-ref s f) rhs)
     (dssl-struct-set! s 'f rhs)]
    [(_ i rhs)
     (set! i rhs)]))

(define (dssl-vector-ref v i)
  (vector-ref v i))

(define-for-syntax (format-stx fmt stx0 . stxs)
  (datum->syntax stx0
    (string->symbol
      (apply format fmt
             (syntax->datum stx0)
             (map syntax->datum stxs)))))

(define-syntax (struct-getter-name stx)
  (syntax-parse stx
    [(_ name:id field:id)
     (format-stx "~a-~a" #'name #'field)]))

(define-syntax (struct-setter-name stx)
  (syntax-parse stx
    [(_ name:id field:id)
     (format-stx "set-~a-~a!" #'name #'field)]))

(define-syntax (dssl-defstruct stx)
  (syntax-parse stx
    [(_ name:id ((formal-field:id contract:expr) ...))
     #:fail-when (check-duplicate-identifier
                   (syntax->list #'(formal-field ...)))
                 "duplicate field name"
     (with-syntax ([s:cons (format-stx "s:~a" #'name)])
       #`(begin
           (define-struct (s:cons struct-base) (formal-field ...)
                          #:mutable
                          #:transparent
                          #:methods gen:custom-write
                          [(define write-proc dssl-write-struct)])
           (define struct-info
             (make-struct-info
               'name
               (racket:vector-immutable
                 (make-field-info
                   'formal-field
                   (struct-getter-name s:cons formal-field)
                   (let ()
                     (define/contract setter
                       (-> any/c (recursive-contract contract) any/c)
                       (struct-setter-name s:cons formal-field))
                     setter))
                 ...)))
           (define/contract (name formal-field ...)
             (-> (recursive-contract contract) ... any/c)
             (s:cons struct-info formal-field ...))
           (define (#,(format-stx "~a?" #'name) value)
             (#,(format-stx "~a?" #'s:cons) value))
           ; The name on the next line is generated by the parser:
           (define-syntax (#,(format-stx "m:~a" #'name) stx)
             (syntax-parse stx
               [(_ [field:id expr:expr] (... ...))
                #:fail-when (check-duplicate-identifier
                              (syntax->list #'(field (... ...))))
                "duplicate field name"
                (begin
                  (define actual-fields
                    (map syntax->datum (syntax->list #'(field (... ...)))))
                  (define actual-exprs
                    (syntax->list #'(expr (... ...))))
                  (define field-exprs
                    (map cons actual-fields actual-exprs))
                  (define formal-fields (syntax->list #'(formal-field ...)))
                  (define exprs
                    (for/list ([field formal-fields])
                      (cond
                        [(assq (syntax->datum field) field-exprs) => cdr]
                        [else
                          (raise-syntax-error
                            #f
                            (format "Struct ~a requires field ~a"
                                    'name (syntax->datum field))
                            stx)])))
                  (for ([field actual-fields])
                    (unless (memq field (map syntax->datum formal-fields))
                      (raise-syntax-error
                        #f
                        (format "Struct ~a does not have field ~a"
                                'name field)
                        field)))
                  #`(name #,@exprs))]))))]))

(define-syntax (dssl-object stx)
  (syntax-parse stx
    [(_ name:id [field:id expr:expr] ...)
     #:fail-when (check-duplicate-identifier
                   (syntax->list #'(field ...)))
                 "duplicate field name"
     #'(let ()
         (dssl-defstruct name ((field any/c) ...))
         (name expr ...))]))

(define (get-field-info struct field)
  (let/ec return
    (unless (struct-base? struct)
      (runtime-error "Value â~aâ is not a struct" struct))
    (define info-vector (struct-info-field-infos
                          (struct-base-struct-info struct)))
    (for ([info (in-vector info-vector)])
      (when (eq? field (field-info-name info))
        (return info)))
    (runtime-error "Struct â~aâ does not have field â~aâ"
                   struct field)))

(define-syntax-rule (dssl-struct-ref expr field)
  (let ([value expr])
    ((field-info-getter (get-field-info value 'field)) value)))

(define (dssl-struct-set! struct field rhs)
  ((field-info-setter (get-field-info struct field)) struct rhs))

(define-syntax (dssl-test stx)
  (syntax-parse stx
    [(_ name:expr body:expr ...+)
     #'(test-case (~a name) body ...)]))

(define-syntax (dssl-time stx)
  (syntax-parse stx
    [(_ name:expr body:expr ...)
     #'(let ([lab name])
         (define-values (_lst cpu real gc) (time-apply (Î» () body ...) '()))
         (printf "~a: cpu: ~a real: ~a gc: ~a\n" lab cpu real gc))]))

(define (dssl-make-vector a b)
  (make-vector a b))

(define (vector . args)
  (list->vector args))

(define (build_vector n f)
  (racket:build-vector n f))

(define (len v)
  (vector-length v))

(define-syntax-rule (dssl-assert expr)
  (unless expr
    (assertion-error "â~aâ did not evaluate to true" 'expr)))

(define-syntax-rule (dssl-assert-eq e1 e2)
  (begin
    (define v1 e1)
    (define v2 e2)
    (unless (equal? v1 v2)
      (assertion-error "â~aâ â  â~aâ" v1 v2))))

(define (dssl-/ a b)
  (cond
    [(and (int? a) (int? b))
     (quotient a b)]
    [(and (num? a) (num? b))
     (/ a b)]
    [else (runtime-error
            "operator / expects numbers, but given â~aâ and â~aâ"
            a b)]))

(define dssl-+
  (case-lambda
    [(a)
     (cond
       [(number? a)
        a]
       [else
         (runtime-error
           "unary + expects a number, but given â~sâ"
           a)])]
    [(a b)
     (cond
       [(and (number? a) (number? b))
        (+ a b)]
       [(or (string? a) (string? b))
        (format "~a~a" a b)]
       [else
         (runtime-error
           "+ expects 2 numbers or at least 1 string, but given â~sâ and â~sâ"
           a b)])]))

(define (dssl-!= a b)
  (not (equal? a b)))

(define (dssl-!== a b)
  (not (eq? a b)))

(define-syntax-rule (make-comparison name string-cmp number-cmp)
  (define (name a b)
    (cond
      [(and (string? a) (string? b))
       (string-cmp a b)]
      [(and (number? a) (number? b))
       (number-cmp a b)]
      [else
        (runtime-error
          "Comparator â~aâ only applies to 2 strings or 2 numbers"
          'number-cmp)])))

(make-comparison dssl-< string<? <)
(make-comparison dssl-> string>? >)
(make-comparison dssl-<= string<=? <=)
(make-comparison dssl->= string>=? >=)

(define (print fmt . values)
  (cond
    [(string? fmt) (display (apply format fmt values))]
    [else          (for-each display (cons fmt values))]))

(define (println fmt . values)
  (apply print fmt values)
  (newline))

(define (dssl-<< n m)
  (arithmetic-shift n m))

(define (dssl->> n m)
  (arithmetic-shift n (- m)))

(define (chr i)
  (~a (integer->char i)))

(define (explode s)
  (list->vector
    (racket:map (Î» (c) (list->string (list c)))
                (string->list s))))

(define (implode vec)
  (apply string-append (vector->list vec)))

(define (ord c)
  (unless (= 1 (string-length c))
    (error 'ord "expect character (string of length 1)"))
  (char->integer (string-ref c 0)))

(define (map f vec)
  (build-vector (vector-length vec)
                (Î» (i) (f (vector-ref vec i)))))

(define (filter f vec)
  (list->vector (racket:filter f (vector->list vec))))

(define (num? x) (number? x))

(define (int? x) (exact-integer? x))

(define (float? x) (flonum? x))

(define (str? x) (string? x))

(define (bool? x) (boolean? x))

(define (proc? x) (procedure? x))

(define (vec? x) (vector? x))

(define (OrC c . cs)
  (apply or/c c cs))

(define (FunC c . cs)
  (define all (cons c cs))
  (define rev-all (reverse all))
  (define args (reverse (rest rev-all)))
  (define res (first rev-all))
  (dynamic->* #:mandatory-domain-contracts args
              #:range-contracts (list res)))

(define (apply_contract contract value)
  (with-contract apply_contract
                 #:result contract
                 value))

(define (floor n)
  (inexact->exact (racket:floor n)))

(define (ceiling n)
  (inexact->exact (racket:ceiling n)))

(define (int x)
  (cond
    [(number? x) (inexact->exact (truncate x))]
    [(string? x)
     (cond
       [(string->number x) => int]
       [else (runtime-error "int: could not convert to integer: ~s" x)])]
    [(eq? #t x)  1]
    [(eq? #f x)  0]
    [else (type-error 'int x "number, string, or Boolean")]))

(define (float x)
  (cond
    [(number? x) (exact->inexact x)]
    [(string? x)
     (cond
       [(string->number x) => float]
       [else (runtime-error "float: could not convert to float: ~s" x)])]
    [(eq? #t x)  1.0]
    [(eq? #f x)  0.0]
    [else (type-error 'int x "number, string, or Boolean")]))

(define random
  (case-lambda
    [() (racket:random)]
    [(limit) (racket:random limit)]
    [(low high) (racket:random low high)]))

; This is the largest argument that `random` can take.
(define RAND_MAX 4294967087)

(define (random_bits n)
  (define *RADIX* 16)
  (cond
    [(zero? n)      0]
    [else           (+ (* 2 (random_bits (sub1 n)))
                       (random 2))]))

(define-syntax-rule (dssl-error msg arg ...)
  (error (format msg arg ...)))

(define (type-error who got expected)
  (runtime-error "~a: got ~s where ~a expected" who got expected))

(define (runtime-error fmt . args)
  (error (apply format (string-append "Runtime error: " fmt) args)))

(define (assertion-error fmt . args)
  (error (apply format (string-append "Assertion failed: " fmt) args)))
